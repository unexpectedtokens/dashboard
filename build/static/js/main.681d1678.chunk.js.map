{"version":3,"sources":["components/container/styled.js","components/layout/Sidenav/styled.js","components/layout/Sidenav/index.js","components/UI/ViewContainer.js","components/views/List/styled.js","components/views/List/index.js","components/views/AddNew/styled.js","components/UI/MainButton.js","components/views/AddNew/index.js","components/container/App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["createGlobalStyle","Container","styled","div","NavContainer","Nav","props","PageContainer","grid","ListContainer","Row","List","articles","map","prod","index","key","name","code","supply","InputComp","input","Label","label","StyledMainButton","button","MainButton","onClick","clicked","children","Adder","setName","setBarCode","addProduct","barCode","useRef","type","placeholder","onChange","e","target","value","ref","App","useState","setArticles","productName","prodNumber","fetcher","a","axios","get","res","data","post","useEffect","Boolean","window","location","hostname","match","initialState","store","createStore","state","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.681d1678.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from \"styled-components\";\nexport default createGlobalStyle`\n  *{\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n  }\n  html{\n    font-size: 67.5%;\n    font-family: \"Ubuntu\", sans-serif;\n  }\n  body{\n    color: #555;\n  }\n\n`;\nexport const Container = styled.div`\n  width: 100%;\n  min-height: 100vh;\n  background: #e9e9e9;\n  padding: 1rem 1rem 1rem 21rem;\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 1.5rem;\n`;\n","import styled from \"styled-components\";\n\nexport const NavContainer = styled.div`\n  background: #333;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 20rem;\n  padding: 1rem;\n  height: 100%;\n  h1 {\n    text-align: center;\n    color: #fff;\n    font-size: 2.5rem;\n    font-weight: 100;\n  }\n`;\n","import { NavContainer } from \"./styled\";\nimport React from \"react\";\nexport const Nav = props => {\n  return (\n    <NavContainer>\n      <h1>DASHBOARD</h1>\n    </NavContainer>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const PageContainer = styled.div`\n  /* display: grid;\n  grid-template-columns: ${props => (props.grid ? props.grid : \"1fr\")}; */\n  background: #fff;\n   border-radius: 5px;\n  padding: 1.5rem;\n`;\n","import styled from \"styled-components\";\n\nexport const ListContainer = styled.div`\n  width: 100%;\n  padding: 1rem;\n  /* background: #e9e9e9; */\n`;\nexport const Row = styled.div`\n  background: #fff;\n  padding: 1rem;\n  width: 100%;\n  :not(:last-child) {\n    border-bottom: 1px solid #e9e9e9;\n  }\n  :first-child {\n    border-radius: 5px 5px 0 0;\n    div {\n      font-weight: 600;\n      color: #000;\n    }\n  }\n  :last-child {\n    border-radius: 0 0 5px 5px;\n  }\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  :hover {\n    background: #f9f9f9;\n  }\n`;\n","import React from \"react\";\nimport { PageContainer } from \"../../UI/ViewContainer\";\nimport { ListContainer, Row } from \"./styled\";\nexport const List = ({ articles }) => {\n  return (\n    <PageContainer>\n      <ListContainer>\n        <Row>\n          <div>Productname</div>\n          <div>Barcode</div>\n          <div>Product stock</div>\n        </Row>\n        {articles &&\n          articles.map((prod, index) => (\n            <Row key={index}>\n              <div>{prod.name}</div>\n              <div>{prod.code}</div>\n              <div>{prod.supply}</div>\n            </Row>\n          ))}\n      </ListContainer>\n    </PageContainer>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const InputComp = styled.input`\n  width: 100%;\n  border-radius: 15px;\n  border: none;\n  background: #e9e9e9;\n  padding: 1rem;\n  text-indent: 5px;\n  :focus {\n    background: #d9d9d9;\n  }\n`;\nexport const Label = styled.label`\n  margin: 1rem 5px;\n  display: block;\n`;\n","import styled from \"styled-components\";\nimport React from \"react\";\nconst StyledMainButton = styled.button`\n  display: inline-block;\n  background: #54c654;\n  color: #fff;\n  padding: 1rem 1.6rem;\n  border-radius: 20px;\n  border: none;\n  margin: 2rem 0;\n  transition: background 0.3s;\n  cursor: pointer;\n  :hover {\n    background: #45b545;\n  }\n`;\n\nexport const MainButton = props => (\n  <StyledMainButton onClick={props.clicked}>{props.children}</StyledMainButton>\n);\n","import React, { useRef, useEffect } from \"react\";\nimport { InputComp, Label } from \"./styled\";\nimport { PageContainer } from \"../../UI/ViewContainer\";\nimport { MainButton } from \"../../UI/MainButton\";\n\nexport const Adder = props => {\n  const { setName, setBarCode, addProduct } = props;\n\n  const barCode = useRef();\n  return (\n    <PageContainer>\n      <Label>Product name</Label>\n      <InputComp\n        type=\"text\"\n        placeholder=\"Product name\"\n        onChange={e => setName(e.target.value)}\n      ></InputComp>\n      <Label>Barcode</Label>\n      <InputComp\n        type=\"text\"\n        placeholder=\"Barcode\"\n        onChange={e => setBarCode(e.target.value)}\n        ref={barCode}\n      ></InputComp>\n      <MainButton clicked={addProduct}>Add product</MainButton>\n    </PageContainer>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport Base, { Container } from \"./styled\";\nimport axios from \"axios\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { Nav } from \"../layout/Sidenav\";\nimport { List } from \"../views/List\";\nimport { Adder } from \"../views/AddNew\";\nfunction App() {\n  const [articles, setArticles] = useState(null);\n  const [productName, setName] = useState(\"\");\n  const [barCode, setBarCode] = useState(null);\n  const [prodNumber, setNumber] = useState(null);\n  const fetcher = async () => {\n    const res = await axios.get(\"/articles\");\n    setArticles(res.data.articles);\n  };\n  const addProduct = async () => {\n    const res = await axios.post(\"/article\", {\n      name: productName,\n      code: barCode,\n      prodNumber\n    });\n    fetcher();\n  };\n  useEffect(() => {\n    fetcher();\n  }, []);\n\n  return (\n    <BrowserRouter>\n      <Container>\n        <Base></Base>\n        <Nav></Nav>\n        <List articles={articles}></List>\n        <Adder\n          setName={setName}\n          setBarCode={setBarCode}\n          addProduct={addProduct}\n          // setNumber={setNumber}\n        ></Adder>\n      </Container>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = { articles: [] };\n\nexport const rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"ADD_ARTICLES\":\n      return { ...state, articles: action.articles };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/container/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport { rootReducer } from \"./store/reducer\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}