{"version":3,"sources":["components/container/styled.js","components/layout/Sidenav/styled.js","components/layout/Sidenav/index.js","components/UI/ViewContainer.js","components/views/home/List/styled.js","components/views/home/List/index.js","components/views/home/AddNew/styled.js","components/UI/MainButton.js","components/views/home/AddNew/index.js","components/UI/Notifications/styled.js","components/UI/Notifications/index.js","components/UI/Popup.js","components/container/App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["createGlobalStyle","Container","styled","div","NavContainer","Nav","props","PageContainer","grid","ListContainer","Row","List","articles","map","prod","index","key","name","code","supply","InputComp","input","Label","label","ChangeModeBar","activeStyles","css","ChangeModeButton","p","active","StyledMainButton","button","MainButton","onClick","clicked","children","Adder","setName","setBarCode","addProduct","barCode","productName","useState","mode","toggleMode","type","placeholder","onChange","e","target","value","NotificationContainer","Notification","Notifications","notifications","removeNotification","n","i","message","Backdrop","StyledPopup","Popup","App","setArticles","setNotifications","popup","addNotifictation","notification","id","Date","now","Math","random","newNotifications","concat","setTimeout","filter","pre","fetcher","a","axios","get","res","data","console","log","art","length","post","useEffect","toString","parseInt","splice","Boolean","window","location","hostname","match","initialState","store","createStore","state","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2d5ad3a.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from \"styled-components\";\nexport default createGlobalStyle`\n  *{\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n    outline: none;\n  }\n  html{\n    font-size: 67.5%;\n    font-family: \"Ubuntu\", sans-serif;\n  }\n  body{\n    color: #555;\n  }\n  ::-moz-selection { /* Code for Firefox */\n  color: #fff;\n  background: #54c654;\n}\n\n::selection {\n  color: #fff;\n  background: #54c654;\n}\n`;\nexport const Container = styled.div`\n  width: 100%;\n  min-height: 100vh;\n  background: #e9e9e9;\n  padding: 1rem 1rem 1rem 21rem;\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-template-rows: 50%;\n  grid-gap: 1.5rem;\n`;\n","import styled from \"styled-components\";\n\nexport const NavContainer = styled.div`\n  background: #333;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 20rem;\n  padding: 1rem;\n  height: 100%;\n  h1 {\n    text-align: center;\n    color: #fff;\n    font-size: 2.5rem;\n    font-weight: 100;\n  }\n`;\n","import { NavContainer } from \"./styled\";\nimport React from \"react\";\nexport const Nav = props => {\n  return (\n    <NavContainer>\n      <h1>DASHBOARD</h1>\n    </NavContainer>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const PageContainer = styled.div`\n  /* display: grid;\n  grid-template-columns: ${props => (props.grid ? props.grid : \"1fr\")}; */\n  background: #fff;\n  border-radius: 5px;\n  padding: 1.5rem 1rem;\n`;\n","import styled from \"styled-components\";\n\nexport const ListContainer = styled.div`\n  width: 100%;\n  padding: 1rem;\n  /* background: #e9e9e9; */\n  overflow: scroll;\n`;\nexport const Row = styled.div`\n  background: #fff;\n  padding: 1rem 0;\n  width: 100%;\n  :not(:last-child) {\n    border-bottom: 1px solid #e9e9e9;\n  }\n  :first-child {\n    border-radius: 5px 5px 0 0;\n    div {\n      font-weight: 600;\n      color: #000;\n    }\n  }\n  :last-child {\n    border-radius: 0 0 5px 5px;\n  }\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  :hover {\n    background: #f9f9f9;\n  }\n`;\n","import React from \"react\";\nimport { PageContainer } from \"../../../UI/ViewContainer\";\nimport { ListContainer, Row } from \"./styled\";\nexport const List = ({ articles }) => {\n  return (\n    <PageContainer>\n      <ListContainer>\n        <Row>\n          <div>Productnaam</div>\n          <div>Barcode</div>\n          <div>Voorraad</div>\n        </Row>\n        {articles &&\n          articles.map((prod, index) => (\n            <Row key={index}>\n              <div>{prod.name}</div>\n              <div>{prod.code}</div>\n              <div>{prod.supply}</div>\n            </Row>\n          ))}\n      </ListContainer>\n    </PageContainer>\n  );\n};\n","import styled, { css } from \"styled-components\";\n\nexport const InputComp = styled.input`\n  width: 100%;\n  border-radius: 15px;\n  border: none;\n  background: #e9e9e9;\n  padding: 1rem;\n  text-indent: 5px;\n  :focus {\n    background: #d9d9d9;\n  }\n`;\nexport const Label = styled.label`\n  margin: 1rem 5px;\n  display: block;\n`;\n\nexport const ChangeModeBar = styled.div`\n  width: 100%;\n  margin: 1rem auto 2rem;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  border-bottom: 1px solid #c9c9c9;\n`;\n\nconst activeStyles = css`\n  border-bottom: 3px solid #54c654;\n  color: #54c654;\n`;\n\nexport const ChangeModeButton = styled.p`\n  font-size: 1.5rem;\n  transition: all 0.3s;\n  padding: 1.3rem 1.6rem;\n  cursor: pointer;\n  border: 3px solid transparent;\n  ${props => (props.active ? activeStyles : null)};\n`;\n","import styled from \"styled-components\";\nimport React from \"react\";\nconst StyledMainButton = styled.button`\n  display: inline-block;\n  background: #54c654;\n  color: #fff;\n  padding: 1rem 1.6rem;\n  border-radius: 20px;\n  border: none;\n  margin: 2rem 0;\n  transition: background 0.3s;\n  cursor: pointer;\n  font-size: 1.3rem;\n  :hover {\n    background: #45b545;\n  }\n`;\n\nexport const MainButton = props => (\n  <StyledMainButton onClick={props.clicked}>{props.children}</StyledMainButton>\n);\n","import React, { useState } from \"react\";\nimport { InputComp, Label, ChangeModeBar, ChangeModeButton } from \"./styled\";\nimport { PageContainer } from \"../../../UI/ViewContainer\";\nimport { MainButton } from \"../../../UI/MainButton\";\n\nexport const Adder = props => {\n  const { setName, setBarCode, addProduct, barCode, productName } = props;\n  const [mode, toggleMode] = useState(\"scan\");\n  return (\n    <PageContainer>\n      <ChangeModeBar>\n        <ChangeModeButton\n          onClick={() => toggleMode(\"manual\")}\n          active={mode === \"manual\"}\n        >\n          Manueel\n        </ChangeModeButton>\n        <ChangeModeButton\n          onClick={() => toggleMode(\"scan\")}\n          active={mode === \"scan\"}\n        >\n          Scan\n        </ChangeModeButton>\n      </ChangeModeBar>\n      {mode === \"manual\" ? (\n        <>\n          <Label>\n            Productnaam (Alleen invullen als je een nieuw product toevoegd)\n          </Label>\n          <InputComp\n            type=\"text\"\n            placeholder=\"Productnaam\"\n            onChange={e => setName(e.target.value)}\n            value={productName}\n          ></InputComp>\n          <Label>Barcode*</Label>\n          <InputComp\n            type=\"number\"\n            placeholder=\"Barcode\"\n            onChange={e => setBarCode(e, mode)}\n            value={barCode}\n          ></InputComp>\n          <MainButton clicked={addProduct}>Product toevoegen</MainButton>\n        </>\n      ) : (\n        <>\n          <Label>Barcode*</Label>\n          <InputComp\n            type=\"number\"\n            placeholder=\"Barcode\"\n            onChange={e => setBarCode(e, mode)}\n            value={barCode}\n          ></InputComp>\n        </>\n      )}\n    </PageContainer>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const NotificationContainer = styled.div`\n  position: fixed;\n  bottom: 2rem;\n  right: 2rem;\n  width: 50%;\n`;\nexport const Notification = styled.p`\n  width: 100%;\n  padding: 2rem;\n  background: ${props => (props.type === \"success\" ? \"#54c654\" : \"red\")};\n  opacity: 0.6;\n  transition: all 0.3s;\n  font-size: 1.6rem;\n  margin-bottom: 1rem;\n  border-radius: 2px;\n  :hover {\n    opacity: 1;\n  }\n  color: #fff;\n`;\n","import React from \"react\";\nimport { NotificationContainer, Notification } from \"./styled\";\n\nexport const Notifications = ({ notifications, removeNotification }) => {\n  return (\n    <NotificationContainer>\n      {notifications.map((n, i) => {\n        return (\n          <Notification\n            key={i}\n            type={n.type}\n            onClick={() => removeNotification(i)}\n          >\n            {n.message}\n          </Notification>\n        );\n      })}\n    </NotificationContainer>\n  );\n};\n","import styled from \"styled-components\";\nimport React from \"react\";\nconst Backdrop = styled.div`\n  width: 100%;\n  position: fixed;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.2);\n  top: 0;\n  left: 0;\n  z-index: 90;\n`;\n\nconst StyledPopup = styled.div`\n  z-index: 91;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: #fff;\n  width: 50%;\n  min-height: 10rem;\n  padding: 2rem;\n  border-radius: 5px;\n`;\n\nexport const Popup = props => {\n  return (\n    <Backdrop>\n      <StyledPopup>{props.children}</StyledPopup>\n    </Backdrop>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport Base, { Container } from \"./styled\";\nimport axios from \"axios\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Nav } from \"../layout/Sidenav\";\nimport { List } from \"../views/home/List\";\nimport { Adder } from \"../views/home/AddNew\";\nimport { Notifications } from \"../UI/Notifications\";\nimport { Popup } from \"../UI/Popup\";\nfunction App() {\n  const [articles, setArticles] = useState(null);\n  const [productName, setName] = useState(\"\");\n  const [barCode, setBarCode] = useState(\"\");\n  const [notifications, setNotifications] = useState([]);\n  const [popup, togglePopup] = useState(false);\n  //  useEffect(() => console.log(notifications), [notifications]);\n  //const [prodNumber, setNumber] = useState(null);\n  const addNotifictation = ({ message, type }) => {\n    const notification = { message, type, id: Date.now() + Math.random() };\n    let newNotifications = [...notifications].concat(notification);\n    setNotifications(newNotifications);\n    setTimeout(() => {\n      newNotifications = [...notifications].filter(\n        n => n.id !== notification.id\n      );\n      setNotifications(pre => pre.filter(n => n.id !== notification.id));\n    }, 5000);\n  };\n  const removeNotification = i => {\n    const newNotifications = [...notifications];\n    newNotifications.splice(i, 1);\n    setNotifications(newNotifications);\n  };\n\n  const fetcher = async () => {\n    const res = await axios.get(\"/articles\");\n\n    setArticles(res.data.articles);\n  };\n  const addProduct = async (code = barCode) => {\n    console.log(code);\n    console.log(productName);\n    console.log(\n      articles.filter(art => {\n        console.log(typeof art.code, typeof code);\n        return art.code === code;\n      })\n    );\n    if (\n      articles.filter(art => art.code === code).length === 0 &&\n      productName === \"\"\n    ) {\n      return addNotifictation({\n        message: \"Je moet een naam invullen als je een nieuw product toevoegd\",\n        type: \"error\"\n      });\n    }\n    if (code.length < 13) {\n      return addNotifictation({\n        message: \"Barcode moet 13 cijfers bevatten\",\n        type: \"error\"\n      });\n    }\n    await axios.post(\"/article\", {\n      name: productName,\n      code: code\n    });\n    addNotifictation({\n      message: \"Product successvol toegevoegd\",\n      type: \"success\"\n    });\n    fetcher();\n  };\n  const handleBarCodeChange = (e, mode) => {\n    setBarCode(e.target.value);\n    if (mode === \"scan\" && e.target.value.toString().length === 13) {\n      const code = e.target.value;\n      addProduct(parseInt(code));\n      setBarCode(\"\");\n    }\n  };\n  useEffect(() => {\n    fetcher();\n  }, []);\n\n  return (\n    <BrowserRouter>\n      <Container>\n        <Base></Base>\n        <Nav></Nav>\n        <List articles={articles}></List>\n        <Adder\n          setName={setName}\n          setBarCode={handleBarCodeChange}\n          addProduct={addProduct}\n          barCode={barCode}\n          productName={productName}\n          // setNumber={setNumber}\n        ></Adder>\n      </Container>\n      <Notifications\n        removeNotification={removeNotification}\n        notifications={notifications}\n      ></Notifications>\n      {popup ? <Popup></Popup> : null}\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = { articles: [] };\n\nexport const rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"ADD_ARTICLES\":\n      return { ...state, articles: action.articles };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/container/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport { rootReducer } from \"./store/reducer\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}